"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.linkAndroidDependency = void 0;

var _interopRequireWildcard2 = _interopRequireDefault(require("@babel/runtime/helpers/interopRequireWildcard"));

var _path = _interopRequireDefault(require("path"));

var _pifs = require("pifs");

const getDependencyAndroidSourcePath = async dependencyPath => {
  try {
    const reactNativeConfig = await Promise.resolve(`${_path.default.resolve(dependencyPath, 'react-native.config.js')}`).then(s => (0, _interopRequireWildcard2.default)(require(s)));
    return _path.default.join(dependencyPath, reactNativeConfig.dependency.platforms.android.sourceDir);
  } catch {
    return _path.default.join(dependencyPath, 'android');
  }
};

const linkAndroidDependency = async options => {
  const dependencyPath = _path.default.join('node_modules', options.dependencyName);

  const dependencyAndroidSourcePath = await getDependencyAndroidSourcePath(dependencyPath);

  const settingsGradlePath = _path.default.join(options.projectPath, 'settings.gradle');

  const dependencySettingsGradlePath = _path.default.relative(options.projectPath, dependencyAndroidSourcePath);
  
  const internalDependencyName = options.dependencyName.indexOf('@') === -1
    ? options.dependencyName
    : options.dependencyName.split('/')[1]

  let settingGradleData = await (0, _pifs.readFile)(settingsGradlePath, {
    encoding: 'utf8'
  });
  settingGradleData = settingGradleData.replace('// REBOX', `include ':${internalDependencyName}'\nproject(':${internalDependencyName}').projectDir = new File(rootProject.projectDir, '${dependencySettingsGradlePath}')\n// REBOX`);
  await (0, _pifs.writeFile)(settingsGradlePath, settingGradleData);

  const buildGradlePath = _path.default.join(options.projectPath, 'app', 'build.gradle');

  let buildGradleData = await (0, _pifs.readFile)(buildGradlePath, {
    encoding: 'utf8'
  });
  buildGradleData = buildGradleData.replace('// REBOX', `implementation project(':${internalDependencyName}')\n    // REBOX`);
  await (0, _pifs.writeFile)(buildGradlePath, buildGradleData);

  const dependencyManifestPath = _path.default.join(dependencyAndroidSourcePath, 'src', 'main', 'AndroidManifest.xml');

  const dependencyManifestData = await (0, _pifs.readFile)(dependencyManifestPath, {
    encoding: 'utf8'
  });
  const packageId = /package="(.+)"/.exec(dependencyManifestData)[1];
  const packageDirFiles = await (0, _pifs.readdir)(_path.default.join(dependencyAndroidSourcePath, 'src', 'main', 'java', ...packageId.split('.')));
  const packageName = packageDirFiles.find(filename => filename.endsWith('Package.java')).replace('.java', '');

  const mainApplicationJavaPath = _path.default.join(options.projectPath, 'app', 'src', 'main', 'java', 'com', 'rebox', 'MainApplication.java');

  let mainApplicationJavaData = await (0, _pifs.readFile)(mainApplicationJavaPath, {
    encoding: 'utf8'
  });
  mainApplicationJavaData = mainApplicationJavaData.replace('// REBOX_IMPORT', `import ${packageId}.${packageName};\n// REBOX_IMPORT`).replace('// REBOX_PACKAGE', `packages.add(new ${packageName}());\n      // REBOX_PACKAGE`);
  await (0, _pifs.writeFile)(mainApplicationJavaPath, mainApplicationJavaData);
};

exports.linkAndroidDependency = linkAndroidDependency;